{"version":3,"sources":["components/Preloader/Pulse-1s-200px.svg","components/Preloader/Preloader.jsx","components/CountryCard/CountryCard.jsx","components/Countries/Countries.jsx","app/api/api.js","app/slices/countrySlice.js","App.jsx","app/store.js","serviceWorker.js","index.js"],"names":["Preloader","className","src","loadingImg","alt","CountryCard","name","capital","population","nativeName","flag","toString","replace","React","memo","Countries","countries","useSelector","state","data","useState","value","setValue","isAutocompleteShow","setAutocompleteShow","handleAutocompleteClick","evt","target","textContent","filteredCountries","filter","item","toLowerCase","includes","type","placeholder","onChange","onClick","map","axiosInstance","axios","baseURL","countriesAPI","get","then","response","getCountries","createAsyncThunk","a","counterSlice","createSlice","initialState","isLoading","extraReducers","builder","addCase","pending","fulfilled","action","payload","App","dispatch","useDispatch","useEffect","store","configureStore","reducer","countryReducer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e8ca6911.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Pulse-1s-200px.1adeb5e0.svg\";","import loadingImg from './Pulse-1s-200px.svg';\nimport './Preloader.css';\n\nconst Preloader = () => {\n  return (\n    <div className=\"preloader\">\n      <img src={loadingImg} className=\"preloader__img\" alt=\"Loading app\" />\n    </div>\n  );\n};\n\nexport default Preloader;\n","import React from 'react';\nimport './CountryCard.css';\n\nconst CountryCard = ({ name, capital, population, nativeName, flag }) => {\n  return (\n    <li className=\"country-card\">\n      <div className=\"country-card__description-wrapper\">\n        <h3 className=\"country-card__title\">{name}</h3>\n        <p className=\"country-card__description\">{`Capital: ${capital}`}</p>\n        <p className=\"country-card__description\">{`Population: ${population\n          .toString()\n          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')} people`}</p>\n        <p className=\"country-card__description\">{`Native name: ${nativeName}`}</p>\n      </div>\n      <img className=\"country-card__img\" src={flag} alt={`${name} flag`} />\n    </li>\n  );\n};\n\nexport default React.memo(CountryCard);\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport CountryCard from './../CountryCard/CountryCard';\nimport './Countries.css';\n\nconst Countries = () => {\n  const countries = useSelector((state) => state.countries.data);\n  const [value, setValue] = useState('');\n  const [isAutocompleteShow, setAutocompleteShow] = useState(true);\n\n  const handleInputChange = (evt) => {\n    setValue(evt.target.value);\n  };\n\n  const handleAutocompleteClick = (evt) => {\n    setValue(evt.target.textContent);\n    setAutocompleteShow(false);\n  };\n\n  const handleInputClick = () => {\n    setAutocompleteShow(true);\n  };\n\n  const filteredCountries = countries.filter((item) => {\n    return item.name.toLowerCase().includes(value.toLowerCase());\n  });\n\n  return (\n    <div className=\"countries\">\n      <div className=\"countries__input-wrapper\">\n        <input\n          className=\"countries__input\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={value}\n          onChange={handleInputChange}\n          onClick={handleInputClick}\n        />\n        {value && isAutocompleteShow ? (\n          <ul className=\"countries__autocomplete\">\n            {filteredCountries.map((item) => (\n              <li\n                className=\"countries__autocomplete-element\"\n                key={`li/${item.name}`}\n                onClick={handleAutocompleteClick}\n              >\n                {item.name}\n              </li>\n            ))}\n          </ul>\n        ) : null}\n      </div>\n      <ul className=\"countries__list\">\n        {filteredCountries.map((item) => (\n          <CountryCard\n            name={item.name}\n            capital={item.capital}\n            population={item.population}\n            nativeName={item.nativeName}\n            flag={item.flag}\n            key={item.name}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default React.memo(Countries);\n","import * as axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://restcountries.eu/rest/v2/',\n});\n\nconst countriesAPI = {\n  getCountries() {\n    return axiosInstance.get(`all`).then((response) => response.data);\n  },\n};\n\nexport { countriesAPI };\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { countriesAPI } from './../api/api';\n\nconst initialState = {\n  data: [],\n  isLoading: true,\n};\n\nconst getCountries = createAsyncThunk('countries/getCountries', async () => {\n  const response = await countriesAPI.getCountries();\n  return response;\n});\n\nexport const counterSlice = createSlice({\n  name: 'countries',\n  initialState,\n  extraReducers: (builder) => {\n    builder\n      .addCase(getCountries.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(getCountries.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.data = action.payload;\n      });\n  },\n});\n\nexport { getCountries };\nexport default counterSlice.reducer;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport './App.css';\nimport Preloader from './components/Preloader/Preloader';\nimport Countries from './components/Countries/Countries';\nimport { getCountries } from './app/slices/countrySlice';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.countries.isLoading);\n  useEffect(() => {\n    dispatch(getCountries());\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        <h1 className=\"app__title\">Search your country</h1>\n      </div>\n      <div className=\"app__content\">\n        {isLoading ? <Preloader /> : <Countries />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport countryReducer from './slices/countrySlice';\n\nexport const store = configureStore({\n  reducer: {\n    countries: countryReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}